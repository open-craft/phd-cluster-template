name: Create Instance

on:
  workflow_call:
    inputs:
      INSTANCE_NAME:
        description: "Instance name (must be unique and DNS-compliant)"
        required: true
        type: string
      INSTANCE_TEMPLATE_REPOSITORY:
        description: "Template repository URL"
        required: false
        default: "https://github.com/open-craft/phd-cluster-template.git"
        type: string
      PLATFORM_NAME:
        description: 'Platform name (e.g., "My Open edX Platform")'
        required: true
        type: string
      EDX_PLATFORM_REPOSITORY:
        description: "edX Platform repository URL"
        required: false
        default: "https://github.com/openedx/edx-platform.git"
        type: string
      EDX_PLATFORM_VERSION:
        description: "edX Platform version/branch"
        required: false
        default: "master"
        type: string
      TUTOR_VERSION:
        description: "Tutor version"
        required: false
        default: "latest"
        type: string
      PHD_CLI_VERSION:
        description: "PHD CLI version"
        required: false
        default: "main"
        type: string
      RUNNER_WORKFLOW_LABEL:
        description: 'The label of the runner workflow to run'
        required: false
        default: "ubuntu-latest"
        type: string
    secrets:
      TERRAFORM_SECRETS:
        required: true
      PHD_DOCKER_REGISTRY_CREDENTIALS:
        required: true
      PHD_MYSQL_HOST:
        required: true
      PHD_MYSQL_PORT:
        required: true
      PHD_MYSQL_ROOT_USER:
        required: true
      PHD_MYSQL_ROOT_PASSWORD:
        required: true
      PHD_MONGODB_HOST:
        required: true
      PHD_MONGODB_PORT:
        required: true
      PHD_MONGODB_PROVIDER:
        required: true
      PHD_MONGODB_CLUSTER_ID:
        required: true
      PHD_DIGITALOCEAN_TOKEN:
        required: true
      PHD_STORAGE_TYPE:
        required: true
      PHD_STORAGE_REGION:
        required: true
      PHD_STORAGE_ACCESS_KEY_ID:
        required: true
      PHD_STORAGE_SECRET_ACCESS_KEY:
        required: true
      SSH_PRIVATE_KEY:
        required: true

jobs:
  create-instance:
    runs-on: ${{ inputs.RUNNER_WORKFLOW_LABEL }}
    concurrency:
      group: create-instance-${{ inputs.INSTANCE_NAME }}
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Setup SSH agent for private repositories cloning
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add GitHub to known hosts
        run: |
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Install PHD CLI
        env:
          PHD_CLI_VERSION: ${{ inputs.PHD_CLI_VERSION }}
        run: |
          uv tool install git+https://github.com/open-craft/phd-cluster-template.git@${{ inputs.PHD_CLI_VERSION }}#subdirectory=tooling

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Set up OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: latest

      - name: Create Terraform secrets file
        working-directory: "infrastructure"
        env:
          TERRAFORM_SECRETS: ${{ secrets.TERRAFORM_SECRETS }}
        run: |
          echo "$TERRAFORM_SECRETS" > secrets.auto.tfvars

      - name: Initialize Terraform
        working-directory: "infrastructure"
        env:
          TF_CLI_ARGS: "-no-color"
          AWS_ACCESS_KEY_ID: ${{ secrets.PHD_STORAGE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PHD_STORAGE_SECRET_ACCESS_KEY }}
        run: |
          tofu init -input=false

      - name: Create instance
        env:
          PHD_LOG_LEVEL: DEBUG
          PHD_DOCKER_REGISTRY_CREDENTIALS: ${{ secrets.PHD_DOCKER_REGISTRY_CREDENTIALS }}
          PHD_MYSQL_HOST: ${{ secrets.PHD_MYSQL_HOST }}
          PHD_MYSQL_PORT: ${{ secrets.PHD_MYSQL_PORT }}
          PHD_MYSQL_ROOT_USER: ${{ secrets.PHD_MYSQL_ROOT_USER }}
          PHD_MYSQL_ROOT_PASSWORD: ${{ secrets.PHD_MYSQL_ROOT_PASSWORD }}
          PHD_MONGODB_HOST: ${{ secrets.PHD_MONGODB_HOST }}
          PHD_MONGODB_PORT: ${{ secrets.PHD_MONGODB_PORT }}
          PHD_MONGODB_PROVIDER: ${{ secrets.PHD_MONGODB_PROVIDER }}
          PHD_MONGODB_CLUSTER_ID: ${{ secrets.PHD_MONGODB_CLUSTER_ID }}
          PHD_DIGITALOCEAN_TOKEN: ${{ secrets.PHD_DIGITALOCEAN_TOKEN }}
          PHD_STORAGE_TYPE: ${{ secrets.PHD_STORAGE_TYPE }}
          PHD_STORAGE_REGION: ${{ secrets.PHD_STORAGE_REGION }}
          PHD_STORAGE_ACCESS_KEY_ID: ${{ secrets.PHD_STORAGE_ACCESS_KEY_ID }}
          PHD_STORAGE_SECRET_ACCESS_KEY: ${{ secrets.PHD_STORAGE_SECRET_ACCESS_KEY }}
          # Backend credentials for Terraform state access
          AWS_ACCESS_KEY_ID: ${{ secrets.PHD_STORAGE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PHD_STORAGE_SECRET_ACCESS_KEY }}
        run: |
          phd_create_instance \
            "${{ inputs.INSTANCE_NAME }}" \
            --template-repository "${{ inputs.INSTANCE_TEMPLATE_REPOSITORY }}" \
            --platform-name "${{ inputs.PLATFORM_NAME }}" \
            --edx-platform-repository "${{ inputs.EDX_PLATFORM_REPOSITORY }}" \
            --edx-platform-version "${{ inputs.EDX_PLATFORM_VERSION }}" \
            --tutor-version "${{ inputs.TUTOR_VERSION }}"

      - name: Push changes to remote repository
        run: |
          git add instances/${{ inputs.INSTANCE_NAME }}

          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "feat: add instance ${{ inputs.INSTANCE_NAME }}"
            git pull origin ${{ github.ref_name }} --rebase
            git push
          fi

      - name: Summary
        run: |
          echo "## Instance Created Successfully! ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Instance Name:** \`${{ inputs.INSTANCE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platform Name:** ${{ inputs.PLATFORM_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**edX Platform:** ${{ inputs.EDX_PLATFORM_REPOSITORY }} @ ${{ inputs.EDX_PLATFORM_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tutor Version:** ${{ inputs.TUTOR_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Check ArgoCD for application sync status" >> $GITHUB_STEP_SUMMARY
          echo "2. Monitor Argo Workflows for provisioning progress" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify instance is accessible at your configured domain" >> $GITHUB_STEP_SUMMARY
