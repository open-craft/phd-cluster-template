apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: mongodb-deprovision-template
spec:
  serviceAccountName: workflow-executor
  entrypoint: main
  podGC:
    strategy: OnWorkflowSuccess
    deleteDelayDuration: 24h # Delete pods 24 hours after successful completion
  arguments:
    parameters:
      - name: namespace
        description: "Target namespace for cleanup"
      - name: database-name
        description: "Name of the database to drop"
        value: "openedx"
      - name: username
        description: "Name of the user to drop"
        value: "openedx_user"
      - name: mongodb-host
        description: "MongoDB host address"
        value: "mongodb"
      - name: mongodb-port
        description: "MongoDB port"
        value: "27017"
      - name: mongodb-admin-user
        description: "MongoDB admin user"
        value: "admin"
      - name: mongodb-admin-password
        description: "MongoDB admin password"
      - name: mongodb-admin-database
        description: "MongoDB admin database"
        value: "admin"
      - name: mongodb-provider
        description: "MongoDB provider type (digitalocean_api, mongodb_direct, atlas)"
        value: "mongodb_direct"
      - name: mongodb-cluster-id
        description: "MongoDB cluster ID (for DigitalOcean API provider)"
        value: ""
      - name: digitalocean-token
        description: "DigitalOcean API token (for DigitalOcean API provider)"
        value: ""

  templates:
    - name: main
      steps:
        # Choose deprovisioning strategy based on provider
        - - name: deprovision-digitalocean
            template: deprovision-digitalocean-api
            when: "{{workflow.parameters.mongodb-provider}} == 'digitalocean_api'"
        - - name: deprovision-mongodb-direct
            template: deprovision-mongodb-direct
            when: "{{workflow.parameters.mongodb-provider}} == 'mongodb_direct'"

    #############################################################################
    # DigitalOcean Managed MongoDB (API-based)
    #############################################################################
    - name: deprovision-digitalocean-api
      steps:
        - - name: delete-user-do
            template: delete-user-digitalocean
        - - name: delete-database-do
            template: delete-database-digitalocean

    - name: delete-database-digitalocean
      script:
        image: curlimages/curl:8.1.2
        command: [sh]
        env:
          - name: DIGITALOCEAN_TOKEN
            value: "{{workflow.parameters.digitalocean-token}}"
        source: |
          #!/bin/sh
          set -e

          DATABASE_NAME="{{workflow.parameters.database-name}}"
          MONGODB_CLUSTER_ID="{{workflow.parameters.mongodb-cluster-id}}"

          echo "Deleting database via DigitalOcean API: $DATABASE_NAME"

          # Delete database
          RESPONSE=$(curl -s -X DELETE \
            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
            "https://api.digitalocean.com/v2/databases/$MONGODB_CLUSTER_ID/dbs/$DATABASE_NAME")

          # Check response - DELETE returns 204 on success or error details
          if [ $? -eq 0 ]; then
            echo "Database $DATABASE_NAME deleted successfully or did not exist"
          else
            echo "Warning: Failed to delete database $DATABASE_NAME"
            echo "Response: $RESPONSE"
          fi

    - name: delete-user-digitalocean
      script:
        image: curlimages/curl:8.1.2
        command: [sh]
        env:
          - name: DIGITALOCEAN_TOKEN
            value: "{{workflow.parameters.digitalocean-token}}"
        source: |
          #!/bin/sh
          set -e

          USERNAME="{{workflow.parameters.username}}"
          MONGODB_CLUSTER_ID="{{workflow.parameters.mongodb-cluster-id}}"

          echo "Deleting user via DigitalOcean API: $USERNAME"

          # Delete user
          RESPONSE=$(curl -s -X DELETE \
            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
            "https://api.digitalocean.com/v2/databases/$MONGODB_CLUSTER_ID/users/$USERNAME")

          # Check response
          if [ $? -eq 0 ]; then
            echo "User $USERNAME deleted successfully or did not exist"
          else
            echo "Warning: Failed to delete user $USERNAME"
            echo "Response: $RESPONSE"
          fi

          echo ""
          echo "MongoDB deprovisioning completed (DigitalOcean API)"

    #############################################################################
    # MongoDB Direct Connection (self-hosted, Atlas with direct access)
    #############################################################################
    - name: deprovision-mongodb-direct
      steps:
        - - name: revoke-permissions
            template: revoke-permissions
        - - name: drop-user
            template: drop-user
        - - name: drop-database
            template: drop-database

    - name: revoke-permissions
      script:
        image: mongo:6.0
        command: [bash]
        source: |
          #!/bin/bash
          set -e

          MONGO_URI="mongodb://{{workflow.parameters.mongodb-admin-user}}:{{workflow.parameters.mongodb-admin-password}}@{{workflow.parameters.mongodb-host}}:{{workflow.parameters.mongodb-port}}/{{workflow.parameters.mongodb-admin-database}}"

          echo "Revoking permissions for user: {{workflow.parameters.username}}"
          mongosh "$MONGO_URI" --eval "
            try {
              db.revokeRolesFromUser('{{workflow.parameters.username}}', [
                {role: 'readWrite', db: '{{workflow.parameters.database-name}}'}
              ]);
              print('Permissions revoked for {{workflow.parameters.username}}');
            } catch (e) {
              print('Error revoking permissions: ' + e.message);
            }
          "

    - name: drop-user
      script:
        image: mongo:6.0
        command: [bash]
        source: |
          #!/bin/bash
          set -e

          MONGO_URI="mongodb://{{workflow.parameters.mongodb-admin-user}}:{{workflow.parameters.mongodb-admin-password}}@{{workflow.parameters.mongodb-host}}:{{workflow.parameters.mongodb-port}}/{{workflow.parameters.mongodb-admin-database}}"

          echo "Dropping user: {{workflow.parameters.username}}"
          mongosh "$MONGO_URI" --eval "
            try {
              db.dropUser('{{workflow.parameters.username}}');
              print('User {{workflow.parameters.username}} dropped');
            } catch (e) {
              if (e.code === 11) {
                print('User {{workflow.parameters.username}} does not exist');
              } else {
                print('Error dropping user: ' + e.message);
                throw e;
              }
            }
          "

    - name: drop-database
      script:
        image: mongo:6.0
        command: [bash]
        source: |
          #!/bin/bash
          set -e

          MONGO_URI="mongodb://{{workflow.parameters.mongodb-admin-user}}:{{workflow.parameters.mongodb-admin-password}}@{{workflow.parameters.mongodb-host}}:{{workflow.parameters.mongodb-port}}/{{workflow.parameters.mongodb-admin-database}}"

          echo "Dropping database: {{workflow.parameters.database-name}}"
          mongosh "$MONGO_URI" --eval "
            try {
              db = db.getSiblingDB('{{workflow.parameters.database-name}}');
              db.dropDatabase();
              print('Database {{workflow.parameters.database-name}} dropped');
            } catch (e) {
              print('Error dropping database {{workflow.parameters.database-name}}: ' + e.message);
            }
          "

          echo "MongoDB deprovisioning completed successfully (Direct Connection)!"
          echo "- Database: {{workflow.parameters.database-name}} (dropped)"
          echo "- User: {{workflow.parameters.username}} (dropped)"
          echo "- Namespace: {{workflow.parameters.namespace}}"
